from multicloud_diagrams import MultiCloudDiagrams


def prepare_iam_model(mcd):
    func_arn = 'arn:aws:lambda:eu-west-1:123456789012:function:prod-lambda-name'
    mcd.add_vertex(node_id=func_arn, node_name='prod-lambda-name', node_type='lambda_function')

    role_arn = 'arn:aws:iam::123456789012:role/prod-lambda-name'
    mcd.add_vertex(node_id=role_arn, node_name='role-lambda-name', node_type='iam_role')

    cw_policy_arn = "arn:aws:iam::123456789012:policy/prod-cloudwatch-policy"
    mcd.add_vertex(node_id=cw_policy_arn, node_name='prod-cloudwatch-policy', node_type='iam_policy')

    s3_policy_arn = "arn:aws:iam::123456789012:policy/prod-s3-policy"
    mcd.add_vertex(node_id=s3_policy_arn, node_name='prod-s3-policy', node_type='iam_policy')

    mcd.add_link(src_node_id=f'lambda_function:{func_arn}', dst_node_id=f'iam_role:{role_arn}')
    mcd.add_link(f'iam_role:{role_arn}', f'iam_policy:{cw_policy_arn}')
    mcd.add_link(f'iam_role:{role_arn}', f'iam_policy:{s3_policy_arn}')


def main():
    mcd = MultiCloudDiagrams()

    prefix = 'prod'
    roles_file = f'../output/output.{prefix}.iam-roles.drawio'

    # If file is present (contains nodes generated by previous MCD run), MCD will read all nodes, coordinates from the palette
    # and reuse them when saving, so all nodes will be in the same location as you edited.
    mcd.read_coords_from_file(roles_file)

    prepare_iam_model(mcd)

    mcd.export_to_file(roles_file)


if __name__ == "__main__":
    main()
